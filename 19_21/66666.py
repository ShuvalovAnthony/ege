# 1.   Два игрока, Петя и Ваня играют в следующую игру.
# Задан некоторый набор символьных цепочек («слов»), в котором ни одно слово не является началом другого. Игра начинается с пустой строки,
#  в конец которой игроки по очереди
# дописывают буквы, по одной букве за ход так, чтобы полученная цепочка на каждом шаге была началом одного из заданных слов. Первый ход делает 
# Петя. Выигрывает тот,
# кто первый составит слово из заданного набора.
# Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых
# ходах противника. Описать стратегию игрока — значит описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться
#  при различной игре противника.
# Вопрос 1. Для скольких слов из набора {ПАТРОНИМ,
# ПАУЗОК, ПАЯЦ, ПАТРОНИРОВАТЬ, ПАТРОНЕССА, ПАШНЯ, ПАТРОНТАШ, ПАТРОННИК, ПАЯСНИЧАТЬ}выиграет Петя, независимо от того, как будет ходить Ваня?
# Вопрос
# 2. Для игры, описанной в 19 задании, определите, сколько букв содержит самое длинное слово из набора {ЗЕМЛЯНИКА, ЗЕМЛЯНКА, ЗЛАК, ЗЛАТО, ЗИМНИК,
# ЗИМОВЬЕ}, при записи которого, выигрывает Ваня, независимо от того, как будет ходить Петя?
# Вопрос
# 3. Из букв «А» и «Б» составляются две символьные последовательности(два слова). Первое слово длиною 3 символа, второе длиною 6 символов.
# Для игры, описанной в задании 19, определите,
# какое количество различных пар слов можно составить, чтобы всегда выигрывал Ваня, независимо от того, как будет ходить Петя?
# Например, для пары слов АБА и АААААА выигрывает Ваня. Его выигрышная стратегия
# заключается в том, чтобы первым ходом написать букву «А».

words = ['ПАТРОНЕССА', 'ПАТРОНИМ', 'ПАТРОНИРОВАТЬ', 'ПАТРОННИК', 'ПАТРОНТАШ', 'ПАУЗОК', 'ПАШНЯ', 'ПАЯСНИЧАТЬ', 'ПАЯЦ']

for orig_word in words:
    word = orig_word
    step = 0
    result = ""
    while result not in words:
        result += word[0]
        word = word[1:]
        step += 1
    
    if step%2 == 0:
        print("LOSE", orig_word)
    else:
        print("WIN", orig_word)
    